---
version: "3"

tasks:
  rook-ceph-toolbox:
    desc: Exec into the Rook Ceph toolbox
    cmds:
      - kubectl -n rook-ceph exec -it (kubectl -n rook-ceph get pod -l "app=rook-direct-mount" -o jsonpath='{.items[0].metadata.name}') bash
    silent: true
  rook-password:
    desc: Retrieve the rook-ceph password
    cmds:
      - kubectl -n rook-ceph get secret rook-ceph-dashboard-password -o jsonpath="{['data']['password']}" | base64 --decode && echo

  talos-apply:
    desc: Apply manifests to talos nodes
    cmds:
      - talosctl -n 10.8.20.30 apply-config -f k8s/talos/hegira/machineConfigs/leela.yaml --insecure
      - talosctl -n 10.8.20.40 apply-config -f k8s/talos/hegira/machineConfigs/xerxes.yaml --insecure
      - talosctl -n 10.8.20.42 apply-config -f k8s/talos/hegira/machineConfigs/shodan.yaml --insecure
      - talosctl -n 10.8.20.44 apply-config -f k8s/talos/hegira/machineConfigs/icarus.yaml --insecure
  bootstrap-wipe-rook:
    desc: Wipe rook disks in talos
    cmds:
      - kubectl apply -f tools/wipe-rook.yaml

  git-check-yaml:
    desc: Check yaml for kustomize/kube errors
    cmds:
      - git diff --name-only origin/main.. | grep --color kustomization.yaml | sed 's/kustomization.yaml//' | xargs -I{} kustomize build {}
      - git diff --name-only origin/main.. | grep --color .yaml | xargs cat | kubectl apply -f - --dry-run=server

  bootstrap-sops:
    desc: Bootstrap cluster
    cmds:
      - kubectl create ns flux-system
      - cat ~/.config/sops/age/keys.txt | kubectl -n flux-system create secret generic sops-age --from-file=age.agekey=/dev/stdin

  bootstrap-flux:
    desc: Bootstrap flux (as per version in manifest)
    cmds:
      - yq '.spec.ref.tag' k8s/global/flux/repositories/git/flux.yaml | xargs -I{} flux install --version={} --export | kubectl apply -f -

  bootstrap-cluster:
    desc: Bootstrap ClusterPolicy
    cmds:
      - kubectl apply -k k8s/clusters/hegira/

  k10-password:
    desc: Retrieve the k10 passphrase
    cmds:
      - kubectl get secret $(kubectl get serviceaccount k10-k10 -o jsonpath="{.secrets[0].name}" --namespace kasten-io) --namespace kasten-io -ojsonpath="{.data.token}{'\n'}" | base64 --decode

  pause:
    desc: Pause all Helm Releases that rely on NFS storage
    cmds:
      - flux suspend hr -n home frigate
      - kubectl scale -n home deploy/frigate --replicas 0
      - flux suspend hr -n media jellyfin
      - kubectl scale -n media deploy/jellyfin --replicas 0
      - flux suspend hr -n media lidarr
      - kubectl scale -n media deploy/lidarr --replicas 0
      - flux suspend hr -n media plex
      - kubectl scale -n media deploy/plex --replicas 0
      - flux suspend hr -n media qbittorrent
      - kubectl scale -n media deploy/qbittorrent --replicas 0
      - flux suspend hr -n media radarr
      - kubectl scale -n media deploy/radarr --replicas 0
      - flux suspend hr -n media readarr
      - kubectl scale -n media deploy/readarr --replicas 0
      - flux suspend hr -n media sabnzbd
      - kubectl scale -n media deploy/sabnzbd --replicas 0
      - flux suspend hr -n media sonarr
      - kubectl scale -n media deploy/sonarr --replicas 0

  resume:
    desc: Resume all Helm Releases that rely on NFS storage
    cmds:
      - flux resume hr -n home frigate
      - kubectl scale -n home deploy/frigate --replicas 1
      - flux resume hr -n media jellyfin
      - kubectl scale -n media deploy/jellyfin --replicas 1
      - flux resume hr -n media lidarr
      - kubectl scale -n media deploy/lidarr --replicas 1
      - flux resume hr -n media plex
      - kubectl scale -n media deploy/plex --replicas 1
      - flux resume hr -n media qbittorrent
      - kubectl scale -n media deploy/qbittorrent --replicas 1
      - flux resume hr -n media radarr
      - kubectl scale -n media deploy/radarr --replicas 1
      - flux resume hr -n media readarr
      - kubectl scale -n media deploy/readarr --replicas 1
      - flux resume hr -n media sabnzbd
      - kubectl scale -n media deploy/sabnzbd --replicas 1
      - flux resume hr -n media sonarr
      - kubectl scale -n media deploy/sonarr --replicas 1

  build-talos-config:
    desc: Build talos configs
    cmds:
      - python k8s/talos/buildClusterConfig.py  --variables-file k8s/talos/hegira/variables.sops.yaml k8s/talos/hegira/config.yaml
      - find k8s/talos/hegira/machineConfigs/ -maxdepth 1 -type f -exec talosctl validate -m metal -c {} \;
