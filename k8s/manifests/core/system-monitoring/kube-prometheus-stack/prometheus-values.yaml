---
prometheus:
  ingress:
    enabled: true
    pathType: Prefix
    annotations:
      kubernetes.io/ingress.class: "nginx"
      cert-manager.io/cluster-issuer: ${CLUSTER_CERT}
      external-dns/is-public: "false"
      hajimari.io/enable: "true"
      hajimari.io/icon: database-clock
      hajimari.io/appName: Prometheus

    hosts:
      - prometheus.${EXTERNAL_DOMAIN}
    tls:
      - secretName: tls.prometheus
        hosts:
          - prometheus.${EXTERNAL_DOMAIN}

  thanosService:
    enabled: true
  thanosServiceMonitor:
    enabled: true

  prometheusSpec:
    replicas: 1
    replicaExternalLabelName: "replica"
    ruleSelectorNilUsesHelmValues: false
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelectorNilUsesHelmValues: false
    probeSelectorNilUsesHelmValues: false
    retention: 6h
    enableAdminAPI: true
    walCompression: true
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: ceph-block
          resources:
            requests:
              storage: 10Gi
    thanos:
      image: quay.io/thanos/thanos:v0.25.1
      version: v0.22.0
      objectStorageConfig:
        name: &secret thanos-objstore-secret
        key: objstore.yml
    podAnnotations:
      secret.reloader.stakater.com/reload: *secret

    additionalScrapeConfigs:
      - job_name: hyperion
        honor_timestamps: true
        metrics_path: /metrics
        static_configs:
          - targets:
              - ${NAS_ADDRESS}:9100
            labels:
              app: "synology"

      - job_name: minio
        honor_timestamps: true
        metrics_path: /minio/v2/metrics/cluster
        scheme: http
        static_configs:
          - targets:
              - "s3.${EXTERNAL_DOMAIN}"

      - job_name: pikvm
        metrics_path: /api/export/prometheus/metrics
        basic_auth:
          username: "${SECRET_PIKVM_USERNAME}"
          password: "${SECRET_PIKVM_PASSWORD}"
        static_configs:
          - targets:
              - "pikvm.${EXTERNAL_DOMAIN}"

      # - job_name: node-exporter
      #   honor_timestamps: true
      #   static_configs:
      #     - targets:
      # - "pikvm.${EXTERNAL_DOMAIN}:9100" # FIXME (use same as hyperion above?)

      - job_name: coredns
        honor_timestamps: true
        static_configs:
          - targets:
              - "10.8.5.2:9153"

      - job_name: "kubernetes-ingresses"
        metrics_path: /probe
        scrape_interval: 60s
        params:
          module: [http_2xx]
        kubernetes_sd_configs:
          - role: ingress
        relabel_configs:
          - source_labels:
              [__meta_kubernetes_ingress_annotation_prometheus_io_probe]
            action: keep
            regex: true
          - source_labels:
              [
                __meta_kubernetes_ingress_scheme,
                __address__,
                __meta_kubernetes_ingress_path,
              ]
            regex: (.+);(.+);(.+)
            replacement: ${1}://${2}${3}
            target_label: __param_target
          - target_label: __address__
            replacement: blackbox-exporter.system-monitoring.cluster.local:9115
          - source_labels: [__param_target]
            target_label: instance
          - action: labelmap
            regex: __meta_kubernetes_ingress_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_ingress_name]
            target_label: kubernetes_name

      - job_name: "kubernetes-services-http"
        metrics_path: /probe
        scrape_interval: 60s
        params:
          module: [http_2xx]
        kubernetes_sd_configs:
          - role: service
        relabel_configs:
          - source_labels:
              [__meta_kubernetes_service_annotation_prometheus_io_probe]
            action: keep
            regex: true
          - source_labels:
              [__meta_kubernetes_service_annotation_prometheus_io_protocol]
            action: keep
            regex: http
          - source_labels: [__address__]
            target_label: __param_target
          - target_label: __address__
            replacement: blackbox-exporter.system-monitoring.cluster.local:9115
          - source_labels: [__param_target]
            target_label: instance
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            target_label: kubernetes_name

            # - job_name: "kubernetes-services-tcp" # FIXME
            #   metrics_path: /probe
            #   scrape_interval: 60s
            #   params:
            #     module: [tcp_connect]
            #   kubernetes_sd_configs:
            #     - role: service
            #   relabel_configs:
            #     - source_labels:
            #         [__meta_kubernetes_service_annotation_prometheus_io_probe]
            #       action: keep
            #       regex: true
            #     - source_labels:
            #         [__meta_kubernetes_service_annotation_prometheus_io_protocol]
            #       action: keep
            #       regex: tcp
            #     - source_labels: [__address__]
            #       target_label: __param_target
            #     - target_label: __address__
            #       replacement: blackbox-exporter.system-monitoring.cluster.local:9115
            #     - source_labels: [__param_target]
            #       target_label: instance
            #     - action: labelmap
            #       regex: __meta_kubernetes_service_label_(.+)
            #     - source_labels: [__meta_kubernetes_namespace]
            #       target_label: kubernetes_namespace
            #     - source_labels: [__meta_kubernetes_service_name]
            #       target_label: kubernetes_name
    resources:
      requests:
        memory: 3072Mi
      limits:
        memory: 4096Mi
